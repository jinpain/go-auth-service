services:
  redis-token:
    container_name: redis-token
    image: redis:alpine3.22
    shm_size: 256mb
    environment:
      - REDIS_TOKEN_HOST
      - REDIS_TOKEN_PORT
      - REDIS_TOKEN_PASSWORD
      - REDIS_TOKEN_DB
      - REDIS_TOKEN_PROTOCOL
    networks:
      - redis_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 10s
      interval: 10s
      retries: 5
      timeout: 5s

  redis-verification:
    container_name: redis-verification
    image: redis:alpine3.22
    shm_size: 256mb
    environment:
      - REDIS_VERIFICATION_HOST
      - REDIS_VERIFICATION_PORT
      - REDIS_VERIFICATION_PASSWORD
      - REDIS_VERIFICATION_DB
      - REDIS_VERIFICATION_PROTOCOL
    networks:
      - redis_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 10s
      interval: 10s
      retries: 5
      timeout: 5s

  redis-ui:
    container_name: redis-ui
    image: redis/redisinsight:2.70
    environment:
      RI_REDIS_HOST1: redis-token
      RI_REDIS_HOST2: redis-verification
    ports:
      - "5540:5540"
    depends_on:
      redis-token:
        condition: service_healthy
      redis-verification:
        condition: service_healthy
    networks:
      - redis_network

  postgres:
    container_name: postgres
    image: postgres:18.0-alpine3.22
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust # only for dev
    networks:
      - postgres_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U ${DB_USER}"]
      start_period: 5s
      interval: 10s
      retries: 5

  pg-web-admin:
    container_name: pg-web-admin
    image: dpage/pgadmin4:9.9.0
    environment:
      - PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD
      - PGADMIN_LISTEN_PORT
    ports:
      - "5050:5050"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgres_network
      
  migrations:
    container_name: database-migrations
    image: kukymbr/goose-docker:3.26.0
    environment:
      - GOOSE_DRIVER=${DB_DRIVER}
      - GOOSE_DBSTRING=host=${DB_HOST} port=${DB_PORT} user=${DB_USER} password=${DB_PASSWORD} dbname=${DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src/backend/migrations:/migrations  
    networks:
      - postgres_network

networks:
  redis_network:
    driver: bridge
  postgres_network:
    driver: bridge